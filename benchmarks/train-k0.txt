(set-logic QF_NRA_ODE)
(declare-fun x () Real)
(declare-fun y () Real)
(declare-fun z () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun y_0_0 () Real)
(declare-fun y_0_t () Real)
(declare-fun z_0_0 () Real)
(declare-fun z_0_t () Real)
(declare-fun time_0 () Real)
(declare-fun enforce_train_0 () Real)
(declare-fun enforce_gate_0 () Real)
(declare-fun enforce_controller_0 () Real)
(declare-fun gamma_train_far_0 () Real)
(declare-fun gamma_train_near_0 () Real)
(declare-fun gamma_train_past_0 () Real)
(declare-fun gamma_gate_closed_0 () Real)
(declare-fun gamma_gate_movedown_0 () Real)
(declare-fun gamma_gate_moveup_0 () Real)
(declare-fun gamma_gate_open_0 () Real)
(declare-fun gamma_controller_dodown_0 () Real)
(declare-fun gamma_controller_doup_0 () Real)
(declare-fun gamma_controller_idle_0 () Real)
(assert (<= 0 x_0_0))
(assert (<= x_0_0 5000))
(assert (<= 0 x_0_t))
(assert (<= x_0_t 5000))
(assert (<= 0 y_0_0))
(assert (<= y_0_0 90))
(assert (<= 0 y_0_t))
(assert (<= y_0_t 90))
(assert (<= 0 z_0_0))
(assert (<= z_0_0 5))
(assert (<= 0 z_0_t))
(assert (<= z_0_t 5))
(assert (<= 0 time_0))
(assert (<= time_0 5))
(assert (<= 1 enforce_train_0))
(assert (<= enforce_train_0 3))
(assert (<= 1 enforce_gate_0))
(assert (<= enforce_gate_0 4))
(assert (<= 1 enforce_controller_0))
(assert (<= enforce_controller_0 3))
(assert (<= 0 gamma_train_far_0))
(assert (<= gamma_train_far_0 1))
(assert (<= 0 gamma_train_near_0))
(assert (<= gamma_train_near_0 1))
(assert (<= 0 gamma_train_past_0))
(assert (<= gamma_train_past_0 1))
(assert (<= 0 gamma_gate_closed_0))
(assert (<= gamma_gate_closed_0 1))
(assert (<= 0 gamma_gate_movedown_0))
(assert (<= gamma_gate_movedown_0 1))
(assert (<= 0 gamma_gate_moveup_0))
(assert (<= gamma_gate_moveup_0 1))
(assert (<= 0 gamma_gate_open_0))
(assert (<= gamma_gate_open_0 1))
(assert (<= 0 gamma_controller_dodown_0))
(assert (<= gamma_controller_dodown_0 1))
(assert (<= 0 gamma_controller_doup_0))
(assert (<= gamma_controller_doup_0 1))
(assert (<= 0 gamma_controller_idle_0))
(assert (<= gamma_controller_idle_0 1))
(assert (and (= enforce_train_0 1) (= x_0_0 5000) (= enforce_gate_0 4) (= y_0_0 90) (= enforce_controller_0 3) (= z_0_0 0) (= enforce_train_0 2) (>= y_0_t 0) (>= x_0_t 0) (<= x_0_t 1000)))
(check-sat)
(exit)
